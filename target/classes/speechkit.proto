syntax = "proto3";
package speechkit.tts.v3;
option java_package = "syandex.cloud.api.ai.tts.v3";

message UtteranceSynthesisRequest{
  enum LoudnessNormalizationType{
    LOUDNESS_NORMALIZATION_TYPE_UNSPECIFIED = 0;
    MAX_PEAK = 1;
    LUFS = 2;
  }
  string model = 1;
  oneof Utterance{
    string text = 2;
    TextTemplate  text_template = 3; //Экземпляр текстового шаблона, например{"Hello, {username}" with username="Alice"}
  }
  //repeated - повторяющееся поле
  repeated Hints hints = 4;
  AudioFormatOptions output_audio_spec = 5;
  LoudnessNormalizationType loudness_normalization_type = 6;
  bool unsafe_mode = 7;
}

message TextTemplate{
  // hello, {user}
  string text_template = 1;
  // Определение переменных в тексте шаблона
  // {user: Liza}
  repeated TextVariable variables = 2;
}

message TextVariable{
  string variable_name = 1;
  string variable_value = 2;
}

message Hints{
  oneof Hint{
    string voice = 1;
    AudioTemplate audio_template = 2;
    double speed = 3;
    double volume = 4;
    string  role = 5;
  }
}

message AudioTemplate{
  AudioContent audio = 1;
  TextTemplate text_template = 2;
  repeated AudioVariable variables = 3;
}

message AudioContent{
  //источник звука
  oneof AudioSource{
    bytes  content = 1;
  }
  //описание аудиоформата
  AudioFormatOptions audio_spec = 2;
}

message AudioVariable{
  string variable_name = 1;
  int64 variable_start_ms = 2;
  int64 variable_length_ms = 3;
}

message AudioFormatOptions{
  oneof AudioFormat{
    RawAudio  raw_audio = 1;
    ContainerAudio container_audio = 2;
  }
}

message RawAudio{
  enum AudioEncoding{
    AUDIO_ENCODING_UNSPECIFIED = 0;
    LINEAR16_PCM = 1;
  }
  AudioEncoding audio_encoding = 1;
  int64 sample_rate_hertz = 2;
}

message ContainerAudio {
  enum ContainerAudioType {
    CONTAINER_AUDIO_TYPE_UNSPECIFIED = 0;
    WAV = 1;
    OGG_OPUS = 2;
    MP3 = 3;
  }
  ContainerAudioType container_audio_type = 1;
}

message UtteranceSynthesisResponse {
  AudioChunk audio_chunk = 1;
}

message AudioChunk{
  bytes data = 1;
}

message TextChunk{
  string text = 1;
}

service Synthesizer {
  rpc UtteranceSynthesis (UtteranceSynthesisRequest) returns (stream UtteranceSynthesisResponse);
}
